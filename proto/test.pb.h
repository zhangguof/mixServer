// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBASEImpl();
void InitDefaultsBASE();
void InitDefaultsEchoImpl();
void InitDefaultsEcho();
inline void InitDefaults() {
  InitDefaultsBASE();
  InitDefaultsEcho();
}
}  // namespace protobuf_test_2eproto
class BASE;
class BASEDefaultTypeInternal;
extern BASEDefaultTypeInternal _BASE_default_instance_;
class Echo;
class EchoDefaultTypeInternal;
extern EchoDefaultTypeInternal _Echo_default_instance_;

// ===================================================================

class BASE : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BASE) */ {
 public:
  BASE();
  virtual ~BASE();

  BASE(const BASE& from);

  inline BASE& operator=(const BASE& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BASE(BASE&& from) noexcept
    : BASE() {
    *this = ::std::move(from);
  }

  inline BASE& operator=(BASE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BASE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BASE* internal_default_instance() {
    return reinterpret_cast<const BASE*>(
               &_BASE_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BASE* other);
  friend void swap(BASE& a, BASE& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BASE* New() const PROTOBUF_FINAL { return New(NULL); }

  BASE* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BASE& from);
  void MergeFrom(const BASE& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BASE* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 service_id = 1;
  bool has_service_id() const;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // required int32 command_id = 2;
  bool has_command_id() const;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 2;
  ::google::protobuf::int32 command_id() const;
  void set_command_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BASE)
 private:
  void set_has_service_id();
  void clear_has_service_id();
  void set_has_command_id();
  void clear_has_command_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::int32 command_id_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsBASEImpl();
};
// -------------------------------------------------------------------

class Echo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Echo) */ {
 public:
  Echo();
  virtual ~Echo();

  Echo(const Echo& from);

  inline Echo& operator=(const Echo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Echo(Echo&& from) noexcept
    : Echo() {
    *this = ::std::move(from);
  }

  inline Echo& operator=(Echo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Echo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Echo* internal_default_instance() {
    return reinterpret_cast<const Echo*>(
               &_Echo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Echo* other);
  friend void swap(Echo& a, Echo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Echo* New() const PROTOBUF_FINAL { return New(NULL); }

  Echo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Echo& from);
  void MergeFrom(const Echo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Echo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 service_id = 1;
  bool has_service_id() const;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // required int32 command_id = 2;
  bool has_command_id() const;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 2;
  ::google::protobuf::int32 command_id() const;
  void set_command_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Echo)
 private:
  void set_has_service_id();
  void clear_has_service_id();
  void set_has_command_id();
  void clear_has_command_id();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::int32 command_id_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsEchoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BASE

// required int32 service_id = 1;
inline bool BASE::has_service_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BASE::set_has_service_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BASE::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BASE::clear_service_id() {
  service_id_ = 0;
  clear_has_service_id();
}
inline ::google::protobuf::int32 BASE::service_id() const {
  // @@protoc_insertion_point(field_get:BASE.service_id)
  return service_id_;
}
inline void BASE::set_service_id(::google::protobuf::int32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:BASE.service_id)
}

// required int32 command_id = 2;
inline bool BASE::has_command_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BASE::set_has_command_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BASE::clear_has_command_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BASE::clear_command_id() {
  command_id_ = 0;
  clear_has_command_id();
}
inline ::google::protobuf::int32 BASE::command_id() const {
  // @@protoc_insertion_point(field_get:BASE.command_id)
  return command_id_;
}
inline void BASE::set_command_id(::google::protobuf::int32 value) {
  set_has_command_id();
  command_id_ = value;
  // @@protoc_insertion_point(field_set:BASE.command_id)
}

// -------------------------------------------------------------------

// Echo

// required int32 service_id = 1;
inline bool Echo::has_service_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Echo::set_has_service_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Echo::clear_has_service_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Echo::clear_service_id() {
  service_id_ = 0;
  clear_has_service_id();
}
inline ::google::protobuf::int32 Echo::service_id() const {
  // @@protoc_insertion_point(field_get:Echo.service_id)
  return service_id_;
}
inline void Echo::set_service_id(::google::protobuf::int32 value) {
  set_has_service_id();
  service_id_ = value;
  // @@protoc_insertion_point(field_set:Echo.service_id)
}

// required int32 command_id = 2;
inline bool Echo::has_command_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Echo::set_has_command_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Echo::clear_has_command_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Echo::clear_command_id() {
  command_id_ = 0;
  clear_has_command_id();
}
inline ::google::protobuf::int32 Echo::command_id() const {
  // @@protoc_insertion_point(field_get:Echo.command_id)
  return command_id_;
}
inline void Echo::set_command_id(::google::protobuf::int32 value) {
  set_has_command_id();
  command_id_ = value;
  // @@protoc_insertion_point(field_set:Echo.command_id)
}

// required string msg = 3;
inline bool Echo::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Echo::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Echo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Echo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Echo::msg() const {
  // @@protoc_insertion_point(field_get:Echo.msg)
  return msg_.GetNoArena();
}
inline void Echo::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Echo.msg)
}
#if LANG_CXX11
inline void Echo::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Echo.msg)
}
#endif
inline void Echo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Echo.msg)
}
inline void Echo::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Echo.msg)
}
inline ::std::string* Echo::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:Echo.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Echo::release_msg() {
  // @@protoc_insertion_point(field_release:Echo.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Echo.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
